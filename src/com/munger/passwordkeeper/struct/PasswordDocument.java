package com.munger.passwordkeeper.struct;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;

import com.dropbox.sync.android.DbxDatastore;
import com.dropbox.sync.android.DbxException;
import com.dropbox.sync.android.DbxFields;
import com.dropbox.sync.android.DbxRecord;
import com.dropbox.sync.android.DbxTable;
import com.munger.passwordkeeper.MainActivity;

import android.content.Context;
import android.util.Log;

/**
 * A data structure that contains a list of password details and information for encrypting to the file system.
 * @author codymunger
 *
 */
public class PasswordDocument 
{
	/** android context used for saving the files and printing to the log */private Context context;
	/** encoder used to encrypt the document contents */ private AES256 encoder;
	/** date of the last load to avoid unneeded decryptions */ private long lastLoad;

	/** the contents of this document */ public ArrayList<PasswordDetails> details;
	/** unique id for the next detail */ private int nextIndex;
	public String name;
	private static String rootPath;
	
	public static enum Type
	{
		NONE, FILE, DROPBOX
	};
	
	public Type type;
	public String id;
	
	public PasswordDocument(Context c, String name, Type t)
	{
		context = c;
		encoder = null;
		details = new ArrayList<PasswordDetails>();
		lastLoad = 0;
		nextIndex = 0;
		this.name = name;
		type = t;
		id = "";
		
		if (rootPath == null)
			rootPath = c.getFilesDir().getAbsolutePath() + "/saved/";
	}
	
	public PasswordDocument(Context c, String name, Type t, String password)
	{
		this(c, name, t);
		
		encoder = new AES256(password);
	}
	
	public void setIndex(PasswordDetails dets)
	{
		dets.index = nextIndex;
		nextIndex++;
	}
		
	/**
	 * Set the password that will protect this document.
	 * @param password
	 */
	public void setPassword(String password)
	{
		encoder = new AES256(password);
	}
	
	/**
	 * Get a human readable version of this document
	 */
	public String toString()
	{
		return toString(false);
	}
	
	/**
	 * Get and encrypted or human readable string of this document
	 * @param encrypt encrypt the document if true, don't if false.
	 * @return return the encoded string
	 */
	public String toString(boolean encrypt)
	{
		StringBuilder builder = new StringBuilder();
		
		if (encrypt)
		{
			String enc = encoder.encode("test string");
			builder.append(enc).append('\n');
		}
		
		//encrypt the details line by line
		//for easier decryption later
		for (PasswordDetails det : details)
		{
			String line = det.toString();
			
			if (encrypt)
			{
				String enc = encoder.encode(line);
				builder.append(enc).append('\n');
			}
			else
			{
				//separate details by ***** for easier parsing later
				builder.append(line);
			}
		}
		
		return builder.toString();
	}

	/**
	 * Decrypt an encoded string
	 * @param text the cipertext generated by toString or the plaintext also generated by toString
	 * @param decrypt true if the provided text is encrypted, false if it isn't
	 */
	public void fromString(String text, boolean decrypt)
	{
		details = new ArrayList<PasswordDetails>();
	    if (decrypt)
	    {
	    	//decrypt line by line
	    	String[] parts = text.split("\n");
	    	int sz = parts.length;
	    	for (int i = 0; i < sz; i++)
	    	{
	    		if (parts[i].length() > 0)
	    		{
	    			String dec = encoder.decode(parts[i]);
	                
	    			//the first line in an encrypted document should read "test string"
	    			//otherwise it's an incorrect password or incorrect document
	                if (i == 0)
	                {
	                	if (!dec.equals("test string"))
	                		return;
	                }
	                //otherwise decode to a PasswordDetails item
	                else
	                {
	                	PasswordDetails item = new PasswordDetails();
	                	item.fromString(dec);
	                	details.add(item);
	                }
	            }
	        }
	    }
	    else
	    {
	    	try
	    	{
		    	ByteArrayInputStream bais = new ByteArrayInputStream(text.getBytes());
		    	importFromStream(bais);
		    	bais.close();
	    	}
	    	catch(IOException e){
	    		Log.v("password", "failed to import encoded string");
	    	}
	    }
	}
	
	/**
	 * Encrypt and save the current document contents to file
	 * @param name
	 * @throws IOException
	 */
	public void saveToFile() throws IOException
	{
		String path = rootPath + name;
		File target = new File(path);
		String content = toString(true);
		FileOutputStream fos = new FileOutputStream(target);
		fos.write(content.getBytes());
		fos.close();
		
		lastLoad = System.currentTimeMillis();
	}
	
	public void forceLoad() throws FileNotFoundException, IOException
	{
		if (type == Type.FILE)
			loadFromFile(true);
		else if (type == Type.DROPBOX)
		{}
	}
	
	public void load() throws FileNotFoundException, IOException
	{
		if (type == Type.FILE)
			loadFromFile(false);
		else if (type == Type.DROPBOX)
		{}
	}
	
	/**
	 * Reload the document from the stored file
	 * @param name the name of the file to load
	 * @param force true if you want to ignore the value of lastLoad and reload the contents anyway.  False if you only reload when the file has been updated.
	 * @throws FileNotFoundException if the file doesn't exist
	 * @throws IOException if the file couldn't be loaded
	 */
	public void loadFromFile(boolean force) throws FileNotFoundException, IOException
	{
		String path = rootPath + name;
		File target = new File(path);
		

		long lastMod = target.lastModified();
		
		//quit if the file was loaded before the target file was last modified
		if (!force && lastLoad > lastMod)
			return;
		
		lastLoad = System.currentTimeMillis();
		
		
		details = new ArrayList<PasswordDetails>();
		BufferedReader reader = new BufferedReader(new FileReader(target));
		
		//load up the details one line at a time
		String line;
		boolean first = true;
		int i = 0;
		while ((line = reader.readLine()) != null)
		{
    		if (line.length() > 0)
    		{
    			String dec = encoder.decode(line);
                
                if (first)
                {
                	//the encrypted file will always started with an encrypted "test string"
                	if (!dec.equals("test string"))
                	{
                		reader.close();
                		return;
                	}
                	
                	first = false;
                }
                else
                {
                	PasswordDetails item = new PasswordDetails();
                	item.fromString(dec);
                	details.add(item);
                	item.setIndex(i);
                	i++;
                }
            }
        }
		
		reader.close();
	}
	
	/**
	 * Older versions of this program I have running on my laptop export the files in a different format.
	 * This function reads files in the older format
	 * @param path the file to read data from
	 * @throws FileNotFoundException the file couldn't be found
	 * @throws IOException the file couldn't be loaded
	 */
	public void importFromFile(String path) throws FileNotFoundException, IOException
	{
		FileInputStream fis = new FileInputStream(new File(path));
		
		IOException ret = null;
		
		try
		{
			importFromStream(fis);
		}
		catch(IOException e){
			ret = e;
		}
		finally{
			fis.close();
		}
		
		if (ret != null)
			throw(ret);
	}
	
	/**
	 * Older versions of this program I have running on my laptop export the files in a different format.
	 * This function reads stream in the older format.
	 * Make sure you close your stream.
	 * @param stream the stream to read data from
	 * @throws IOException the file couldn't be loaded
	 */
	public void importFromStream(InputStream stream) throws IOException
	{
		BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
		details = new ArrayList<PasswordDetails>();
		PasswordDetails dets = null;
		PasswordDetails.Pair pair = null;
		
		String line;
		int i = 0;
		IOException ret = null;
		try
		{
			//read from the file line by line
			while ((line = reader.readLine()) != null)
			{
				if (line.length() > 0)
				{
					//create a new set of details if the line starts with Location:
					if (line.startsWith("location: ") && !line.equals("location: "))
					{
						if (dets != null)
						{
							dets.index = details.size() + 1;
							details.add(dets);
							i++;
						}
						
						dets = new PasswordDetails();
						dets.location = line.substring(10);
						dets.name = dets.location;
						dets.index = i;
					}
					else if (line.startsWith("name: "))
					{
						dets.name = line.substring(6);
					}
					//create a new pair for the current details if the line starts with <tab>key:
					else if (line.startsWith("\tkey: "))
					{
						pair = new PasswordDetails.Pair();
						pair.key = line.substring(6);
					}
					//complete the new pair if the line starts with <tab>value:
					else if (line.startsWith("\tvalue: "))
					{
						pair.value = line.substring(8);
						dets.details.add(pair);
					}
					else
					{
						throw new IOException("Couldn't parse import file");
					}
				}
			}
		}
		catch(IOException e){
			ret = e;
		}
		
		if (ret != null)
			throw(ret);
	}
	
	/**
	 * Delete the target file from the filesystem
	 * @param c the context used for determining where the save directory is
	 * @param name the name of the file to delete
	 */
	public static void deleteFile(Context c, String name)
	{
		String path = rootPath + name;
		File target = new File(path);
		target.delete();
	}
	
	/**
	 * Test the provided password on the target file.
	 * The first line should decrypt to "test string" if the password and the file are correct.
	 * @param c the context used to determine where the save directory is
	 * @param name the name of the file to test
	 * @param password the password to use in the decryption test
	 * @return return true if the password and document match; false if they do not.
	 */
	public static boolean testPassword(Context c, String name, String password)
	{
		if (password.length() == 0)
			return false;
		
		String path = rootPath + name;
		File target = new File(path);
		boolean ret = false;
		BufferedReader reader = null;
		AES256 encoder = new AES256(password);
		
		//read a single line and decrypt
		try
		{
			reader = new BufferedReader(new FileReader(target));
			
			String line = reader.readLine();
			
    		if (line.length() > 0)
    		{
    			String dec = encoder.decode(line);
    			if (dec.equals("test string"))
    				ret = true;
    		}
		}
		catch(Exception e){
		}
		//cleanup gracefully
		finally{
			if (reader != null)
				try{reader.close();}catch(Exception e){}
		}
		
		return ret;
	}
	
	public static ArrayList<PasswordDocument> getList(MainActivity act)
	{
		ArrayList<PasswordDocument> ret = new ArrayList<PasswordDocument>();
		
		//get a list of files
		File f = new File(rootPath);
		String[] list = f.list();
		
		for (String item : list)
		{
			PasswordDocument i = new PasswordDocument(act, item, Type.FILE);
			ret.add(i);
		}
		
		
		//get a list of dropbox entries
		if (act.hasDropbox())
		{
			try
			{
				DbxDatastore store = DbxDatastore.openDefault(act.getDropboxAccount());
				DbxTable docsTbl = store.getTable("documents");
				
				DbxTable.QueryResult results = docsTbl.query();
				
				while(results.iterator().hasNext())
				{
					DbxRecord row = results.iterator().next();
					PasswordDocument i = new PasswordDocument(act, row.getString("name"), Type.DROPBOX);
					i.id = row.getId();
					ret.add(i);
				}
			}
			catch(DbxException e){
				Log.v("password", "failed to open dropbox entries");
			}
		}
		
		return ret;
	}
}
